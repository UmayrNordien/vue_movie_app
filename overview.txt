-----------------------
OVERVIEW:
-----------------------

[1] Initial Setup and Dependencies:
I began by setting up the project using Vue CLI and installing essential dependencies 
such as Vue, Vuex, Vue Router, Axios, and Bootstrap. This provided me with a solid foundation to build upon.

[2] Authentication Flow:
To implement user authentication, I integrated an external providerâ€”TMDb. 
I followed TMDb's authentication process, which involved obtaining a request token, validating it with login credentials, 
and exchanging it for a session ID. This allowed me to ensure secure user login and interactions.

[3] Vuex Store Configuration:
I established a Vuex store to effectively manage the app's state. Within the store, 
I defined state variables to track user authentication status and session information. 
I also implemented mutations and actions to update the state based on user interactions.

[4] Vue Router Setup:
Vue Router played a crucial role in defining the app's navigation paths. 
I carefully structured routes for various views, such as login, dashboard, movie details, search results, and the about page. This seamless routing made it easy for users to explore different parts of the app.

[6] Reusable Components:
To ensure a modular and organized codebase, I designed and developed reusable Vue components. 
Each component, including the navigation bar and movie cards, had its own template, script, and styles. This approach promoted maintainability and code reusability.

[8] Navigation and Routing:
Utilizing Vue Router's <router-link> component, I facilitated smooth navigation between views. 
Users could easily transition between different sections of the app by clicking on navigation links, enhancing the overall user experience.

[10] Search Functionality:
To provide users with the ability to search for movies, 
I implemented a search feature using Axios to fetch and display search results. 
This feature enhanced user engagement and made it easier to discover movies.

[7] View Implementation:
I created dedicated views for different sections of the app, 
such as the login page, user dashboard, movie details, search results, and more. 
Each view was responsible for fetching relevant data, handling user interactions, and rendering content based on the template.

[9] User Dashboard:
I designed and implemented the user dashboard, which displayed the user's rated movies and relevant information. 
Vuex managed user session data and movie ratings, ensuring data consistency across the app.

[11] Movie Details View:
For displaying detailed movie information, I created a dedicated view. 
This view showcased the movie's title, poster, description, user ratings, and the option to rate movies. Ratings were sent to the TMDb API in real-time and updated accordingly.

[12] Styling and UI:
To ensure an appealing and responsive design, 
I applied CSS frameworks like Bootstrap for styling. 
This helped create a visually pleasing user interface that looked great on various devices and screen sizes.

[14] Error Handling:
Implementing robust error handling was vital. 
I integrated error handling mechanisms throughout the app to manage scenarios like failed API requests and user input errors. 
This approach maintained a smooth user experience even when encountering challenges.

[13] Testing and Debugging:
Before deployment, I conducted thorough testing on different browsers and devices. 
I utilized browser developer tools and Vue Devtools to identify and rectify any issues, ensuring a seamless user experience.

[15] Deployment:
After building the production version of the app using Vue CLI, 
I deployed it to Netlify for its simplicity and convenience. This step made the app accessible online and ready for users to interact with.

[16] Final Testing and Documentation:
Before concluding the project, I performed comprehensive testing on the deployed version. 
This ensured that all features worked as expected. Additionally, 
I created documentation detailing how to use the app, covering authentication, navigation, and the movie rating feature.

[17] Optional Enhancements:
As an extra touch, I considered adding optional features like user profile settings, sorting options, and user reviews. 
These enhancements could further enhance the app's engagement and user satisfaction.

[18] Code Review and Refactoring:
Prior to completion, I conducted a thorough code review to ensure readability and adherence to best practices. 
I also performed code refactoring to optimize and clarify code sections, enhancing the overall codebase quality.

Summary:
Once the functionality started working
The step-by-step process allowed me to create a functional and user-friendly app 
that included user authentication, movie search, detailed information, and the ability to rate movies.

-----------------------
ISSUES:
-----------------------

[1] API Key Management:
Initially, I hardcoded the API key directly into my code. 
This raised security concerns as the key was exposed in the source code. 
To address this, I learned the importance of using environment variables to keep sensitive information secure.

[2] Lack of Backend:
I realized that not having a backend server to handle API requests could lead to potential issues with security and CORS (Cross-Origin Resource Sharing). 
I learned that it's a good practice to set up a backend server to proxy API requests and manage sensitive data.

[3] External User Authentication Flow using TMDb API 
Implementing the authentication flow with an external provider required careful handling of callback URLs and exchanging tokens. 
I faced challenges in managing these steps correctly to ensure a seamless user experience.

[4] Error Handling
Properly handling errors from API requests, especially during authentication and session creation, was essential. 
Initially, I encountered issues where errors weren't being caught and handled gracefully. 
Learning to implement robust error handling improved the overall reliability of the app.

Complex Vuex Setup:
*Setting up Vuex to manage authentication and session data involved a learning curve. 
Deciding how to structure the store, actions, mutations, and getters required careful consideration to ensure efficient data management.

-----------------------
LEAD TO THE MAIN ISSUE:
-----------------------

I encountered using the Vuex getters to directly access the session_id for movie rating. 
Initially, I attempted to use a guest session approach to rate movies, 
but I realized that it wasn't the best way to ensure authenticated and secure user interactions. 
The guest session approach could lead to limitations and potential misuse.

Instead of persistently storing the session_id in Vuand using getters to retrieve it because i had issues using the getters and commented it out when calling it in the relevant components, 
I chose a more secure and reliable route. 

In the MovieDetail.vue component, 
I wanted to directly include the authentication token in the Authorization header of the API request for movie rating. 
This approach ensures that the user's authentication status is maintained throughout the process.

This change allowed me to rate movies using the authenticated token and have better control over user interactions, 
without relying solely on the session_id stored in Vuex. While this approach worked effectively in the scope of my project, 
I am aware that  securely managing API keys would have been the recommended outcome.